---
- name: Ensure tree exists
  become: true
  ansible.builtin.file:
    path: "{{ cifmw_basedir }}/{{ item }}"
    state: directory
    mode: "0755"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
  loop:
    - artifacts
    - logs
    - parameters

- name: Mark run status
  ansible.builtin.set_fact:
    _run_fail: false
    _failure: false

- name: Use block/rescue/always
  block:
    - name: Output scenario name
      ansible.builtin.debug:
        msg: "Running: {{ scenario.name }}"

    - name: Generate network data
      ansible.builtin.include_role:
        name: "libvirt_manager"
        tasks_from: "generate_networking_data.yml"

  rescue:
    - name: Mark run as failed
      ansible.builtin.set_fact:
        _run_fail: true

  always:
    - name: Validate DNS
      when:
        - not _run_fail | bool
        - scenario.check_dns is defined
      block:
        - name: Ensure we have expected records  # noqa: jinja[invalid]
          vars:
            _lookup: "{{ lookup('community.general.dig', dns.rec)  }}"
          ansible.builtin.assert:
            quiet: true
            that:
              - _lookup == dns.ip
            msg: >-
              {{ dns.rec }} points to "{{ _lookup }}" while
              "{{ dns.ip }}" was expected
          loop: "{{ scenario.check_dns }}"
          loop_control:
            loop_var: dns

      rescue:
        - name: Mark run as failed
          ansible.builtin.set_fact:
            _run_fail: true
            _failure: true

    - name: Validate DHCP files
      when:
        - not _run_fail | bool
        - scenario.check_dhcp is defined
      block:
        - name: Glob all dhcp configuration files
          register: _dhcp_files
          ansible.builtin.find:
            paths: "/etc/cifmw-dnsmasq.d/dhcp-hosts.d"

        - name: Ensure files exist
          vars:
            matcher: "^{{ item }}.*"
            matched: >-
              {{
                _dhcp_files.files |
                map(attribute='path') |
                map('basename') |
                select('match', matcher)
              }}
          ansible.builtin.assert:
            quiet: true
            that:
              - (matched | length) == 1
            msg: >-
              {{ item }} appears {{ matched | length }} times
              {{ matched | join(', ') }}
          loop: "{{ scenario.check_dhcp }}"

      rescue:
        - name: Mark run as failed
          ansible.builtin.set_fact:
            _run_fail: true
            _failure: true

    - name: Validate DHCP options
      when:
        - not _run_fail | bool
        - scenario.check_dhcp_options is defined
        - scenario.check_dhcp_options | bool
      block:
        - name: Check DHCP options configuration file exists
          become: true
          ansible.builtin.stat:
            path: "/etc/cifmw-dnsmasq.d/vm-types-dhcp-options.conf"
          register: _dhcp_options_file

        - name: Assert DHCP options file exists
          ansible.builtin.assert:
            quiet: true
            that:
              - _dhcp_options_file.stat.exists
            msg: "DHCP options file should exist"

        - name: Read DHCP options file
          become: true
          ansible.builtin.slurp:
            path: "/etc/cifmw-dnsmasq.d/vm-types-dhcp-options.conf"
          register: _dhcp_options_content

        - name: Decode DHCP options content
          ansible.builtin.set_fact:
            _dhcp_opts: "{{ _dhcp_options_content.content | b64decode }}"

        - name: Verify DHCP options content for compute VMs
          ansible.builtin.assert:
            quiet: true
            that:
              - "'dhcp-option=tag:compute,60,HTTPClient' in _dhcp_opts"
              - "'dhcp-option=tag:compute,67,http://192.168.140.1:8081/boot-artifacts/compute.ipxe' in _dhcp_opts"
            msg: "DHCP options should contain correct entries for compute VMs"

        - name: Verify DHCP host entry has tag
          become: true
          ansible.builtin.shell:
            cmd: "grep -l 'set:compute' /etc/cifmw-dnsmasq.d/dhcp-hosts.d/osp_trunk_compute-0*"
          register: _tagged_entry
          changed_when: false
          failed_when: _tagged_entry.rc != 0

        - name: Read tagged DHCP host entry
          become: true
          ansible.builtin.slurp:
            path: "{{ _tagged_entry.stdout }}"
          register: _dhcp_host_entry

        - name: Verify tag format in DHCP host entry
          vars:
            _entry_content: "{{ _dhcp_host_entry.content | b64decode | trim }}"
          ansible.builtin.assert:
            quiet: true
            that:
              - "'set:compute' in _entry_content"
              - "_entry_content.startswith('set:compute,')"
            msg: "DHCP host entry should start with 'set:compute,': {{ _entry_content }}"

      rescue:
        - name: Debug DHCP options content
          when: _dhcp_opts is defined
          ansible.builtin.debug:
            var: _dhcp_opts

        - name: Mark run as failed
          ansible.builtin.set_fact:
            _run_fail: true
            _failure: true

    - name: Assert we have expected facts set
      block:
        - name: Ensure it failed at the right place
          when:
            - scenario.failed_step is defined
          ansible.builtin.assert:
            that:
              - molecule_failure_block is defined
              - molecule_failure_block == scenario.failed_step

      rescue:
        - name: Debug molecule_failure_block
          ansible.builtin.debug:
            var: molecule_failure_block

        - name: Mark total failure
          ansible.builtin.set_fact:
            _failure: true

    - name: Mark failure
      when:
        - (_run_fail | bool and not scenario.should_fail | default(false)) or
          (not _run_fail and scenario.should_fail | default(false))
      ansible.builtin.set_fact:
        is_failed: true
        _failure: true

    - name: Manage error
      when:
        - _failure | bool
      block:
        - name: Display error message
          ansible.builtin.debug:
            msg: >-
              Failed to validate {{ scenario.name }}

        - name: Append scenario to list
          ansible.builtin.set_fact:
            failure_list: "{{ failure_list + [scenario.name] }}"

    - name: Copy generated contents
      vars:
        _dest: >-
          {{ _output }}/{{ scenario.name | replace(' ', '_') | lower }}
      block:
        - name: Ensure directory exists
          ansible.builtin.file:
            path: "{{ _dest }}"
            state: directory
            mode: "0755"

        - name: Copy files of interest
          failed_when: false
          ansible.builtin.copy:
            remote_src: true
            src: "{{ cifmw_basedir }}/{{ item }}"
            dest: "{{ _dest }}/"
            mode: "0755"
          loop:
            - artifacts
            - logs
            - parameters

        - name: Copy cifmw-dnsmasq
          failed_when: false
          ansible.builtin.copy:
            remote_src: true
            src: "{{ item.src }}"
            dest: "{{ _dest }}/"
            mode: "{{ item.mode }}"
          loop:
            - { src: "/etc/cifmw-dnsmasq.conf", mode: "0644" }
            - { src: "/etc/cifmw-dnsmasq.d", mode: "0755" }
          loop_control:
            label: "{{ item.src }}"

    - name: Clean environment
      vars:
        deepscrub: true
      ansible.builtin.include_role:
        name: "libvirt_manager"
        tasks_from: "clean_layout.yml"

    - name: Clean leftovers
      become: true
      ansible.builtin.file:
        path: "{{ cifmw_basedir }}"
        state: absent
